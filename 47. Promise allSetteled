/**
 * @param {Array} iterable
 * @return {Promise<Array<{status: 'fulfilled', value: *}|{status: 'rejected', reason: *}>>}
 */
export default function promiseAllSettled(iterable) {
    return new Promise((resolve, reject) => {
          let out = new Array(iterable.length);
          let count = 0;
          if(iterable.length === 0) {
            resolve(out);
          }
          iterable.forEach(async (promise, index)=> {
            try {
              let value = await promise;
              out[index] = {
                status: 'fulfilled',
                value
              } 
            } catch(err) {
              out[index] = {
                status: 'rejected',
                reason: err
              }
         
            }
            count++;
            if(count === iterable.length) {
              resolve(out);
            }
          })
    }); 
}



/**
 * @param {...(any|Object|Array<any|Object|Array>)} args
 * @return {string}
 */
export default function classNames(...args) {
  let output = "";
  args.map(arg => {
    if(Array.isArray(arg)) {
      output += arg.map(el => classNames(el)).join(" ");
    } else if(arg && typeof arg === 'object') {
      output += Object.entries(arg).filter(([, val]) => val).map(([key, val]) => key).join(" ") + " "
    } else if(arg && ['string', 'number'].includes(typeof arg)) {
      output += (arg + " ");
    }
  })
  return output.trim();
}



----------------------Optimised Way--------------------------
/**
 * @param {...(any|Object|Array<any|Object|Array>)} args
 * @return {string}
 */
export default function classNames(...args) {
  let classes = [];
  args.map(arg => {
    if(!arg) return;
    if(['string', 'number'].includes(typeof arg)) {
      classes.push(arg);
    } else if(Array.isArray(arg)) { 
      classes.push(classNames(...arg));
    } else if(typeof arg === 'object') {
      for(const key in arg) { 
        if(arg[key]) {
          classes.push(key); 
        }
      }
    } 
  })
  return classes.join(" ");
}
